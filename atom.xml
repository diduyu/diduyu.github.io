<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>帝都鱼</title>
  
  <subtitle>风起于青萍之末，浪成于微澜之间。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-23T02:40:36.564Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>帝都鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/06/23/hello-world/"/>
    <id>http://yoursite.com/2018/06/23/hello-world/</id>
    <published>2018-06-23T02:40:36.564Z</published>
    <updated>2018-06-23T02:40:36.564Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端知识点总结之data-xxx属性的作用</title>
    <link href="http://yoursite.com/2018/05/24/test/"/>
    <id>http://yoursite.com/2018/05/24/test/</id>
    <published>2018-05-24T02:20:00.000Z</published>
    <updated>2018-06-23T07:15:33.342Z</updated>
    
    <content type="html"><![CDATA[<p>HTML 5增加了一项新功能是自定义数据属性，也就是 data-*自定义属性。在HTML5中我们可以使用以data-为前缀来设置我们需要的自定义属性，<br>来进行一些数据的存放。当然高级浏览器下可通过脚本进行定义和数据存取。在项目实践中非常有用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;user&quot; data-uid=&quot;12345&quot; data-uname=&quot;ifanybug&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h5 id="使用attributes方法存取data-自定义属性的值非常方便："><a href="#使用attributes方法存取data-自定义属性的值非常方便：" class="headerlink" title="使用attributes方法存取data-*自定义属性的值非常方便："></a>使用attributes方法存取data-*自定义属性的值非常方便：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var user = document.getElementById(&apos;user&apos;);</span><br><span class="line">var userName = user.getAttribute(&apos;data-uname&apos;); // userName = &apos;ifanybug&apos;</span><br><span class="line">var userId = user.getAttribute(&apos;data-uid&apos;); // userId = &apos;12345&apos;</span><br></pre></td></tr></table></figure><h5 id="使用setAttribute设置-data-属性"><a href="#使用setAttribute设置-data-属性" class="headerlink" title="使用setAttribute设置 data- 属性"></a>使用setAttribute设置 data- 属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.setAttribute(&apos;data-site&apos;, &apos;http://www.ifanybug.com&apos;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">此方法能在所有的现代浏览器中正常工作，但它不是HTML 5 的自定义 data-* 属性被使用目的，</span><br><span class="line">不然和我们以前使用的自定义属性就没有什么区别了，例如：</span><br><span class="line">&lt;div id=&quot;user&quot; uid=&quot;12345&quot; uname=&quot;ifanybug&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 使用getAttribute获取 data- 属性</span><br><span class="line">var user = document.getElementById(&apos;user&apos;);</span><br><span class="line">var userName = user.getAttribute(&apos;uname&apos;); // userName = &apos;ifanybug&apos;</span><br><span class="line">var userId = user.getAttribute(&apos;uid&apos;); // userId = &apos;12345&apos;</span><br><span class="line">// 使用setAttribute设置 data- 属性</span><br><span class="line">user.setAttribute(&apos;site&apos;, &apos;http://www.ifanybug.com&apos;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>这种“原始”的自定义属性和上面data-*自定义属性没什么区别，知识属性名不一样。</code></p><h4 id="dataset属性存取data-自定义属性的值"><a href="#dataset属性存取data-自定义属性的值" class="headerlink" title="dataset属性存取data-*自定义属性的值"></a>dataset属性存取data-*自定义属性的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这种方式通过访问一个元素的dataset属性来存取data-*自定义属性的值。这个dataset属性是HTML5 JavaScript API的一部分，</span><br><span class="line">用来返回一个所有选择元素data-属性的DOMStringMap对象。</span><br></pre></td></tr></table></figure><h4 id="和attributes方法比较："><a href="#和attributes方法比较：" class="headerlink" title="和attributes方法比较："></a>和attributes方法比较：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data-*主要是对自定义属性做了标准化；</span><br><span class="line">循环取值的时候dataset属性比较方便，还有不是问题的问题就是自定义的attribute也不符合html规范（欢迎留言补充）。</span><br><span class="line">使用这种方法时，不是使用完整的属性名，如data-uid来存取数据，应该去掉data-前缀。</span><br><span class="line">还有一点特别注意的是：data-属性名如果包含了连字符，例如：data-date-of-birth，连字符将被去掉，</span><br><span class="line">并转换为驼峰式的命名，前面的属性名转换后应该是：dateOfBirth。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var el = document.querySelector(&apos;#user&apos;);</span><br><span class="line">    console.log(el.id); // &apos;user&apos;</span><br><span class="line">    console.log(el.dataset);//一个DOMStringMap</span><br><span class="line">    console.log(el.dataset.id); // &apos;1234567890&apos;</span><br><span class="line">    console.log(el.dataset.name); // &apos;ifanybug&apos;</span><br><span class="line">    console.log(el.dataset.dateOfBirth); // &apos;&apos;</span><br><span class="line">    el.dataset.dateOfBirth = &apos;1985-01-05&apos;; // 设置data-date-of-birth的值.</span><br><span class="line">    console.log(&apos;someDataAttr&apos; in el.dataset);//false</span><br><span class="line">    el.dataset.someDataAttr = &apos;mydata&apos;;</span><br><span class="line">    console.log(&apos;someDataAttr&apos; in el.dataset);//true</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果你想删掉一个data-属性，可以这么做：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete el.dataset.id;</span><br><span class="line">//或者</span><br><span class="line">el.dataset.id=null; 。</span><br></pre></td></tr></table></figure></p><p>看起来很美，哈哈，但是不幸的是，新的dataset属性只有在Chrome 8+ Firefox(Gecko) 6.0+<br>Internet Explorer 11+ Opera 11.10+ Safari 6+浏览器中实现，<br>所以在此期间最好用的getAttribute和setAttribute来操作。</p><h4 id="关于data-属性选择器"><a href="#关于data-属性选择器" class="headerlink" title="关于data-属性选择器"></a>关于data-属性选择器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">在实际开发时，您可能会发现它很有用，你可以根据自定义的data-属性选择相关的元素。例如使用querySelectorAll选择元素：</span><br><span class="line">// 选择所有包含 &apos;data-flowering&apos; 属性的元素</span><br><span class="line">document.querySelectorAll(&apos;[data-flowering]&apos;);</span><br><span class="line">// 选择所有包含 &apos;data-text-colour&apos; 属性值为red的元素</span><br><span class="line">document.querySelectorAll(&apos;[data-text-colour=&quot;red&quot;]&apos;);</span><br><span class="line">同样的我们也可以通过data-属性值对相应的元素设置CSS样式，例如下面这个例子：</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    .user &#123;</span><br><span class="line">        width: 256px;</span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">                                                                                                                             </span><br><span class="line">    .user[data-name=&apos;feiwen&apos;] &#123;</span><br><span class="line">        color: brown</span><br><span class="line">    &#125;</span><br><span class="line">                                                                                                                             </span><br><span class="line">    .user[data-name=&apos;css&apos;] &#123;</span><br><span class="line">        color: red</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;user&quot; data-id=&quot;123&quot; data-name=&quot;feiwen&quot;&gt;1&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;user&quot; data-id=&quot;124&quot; data-name=&quot;css&quot;&gt;ifanybug&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="如果你使用jQuery类库，那么你可以非常愉悦的使用jquery的data-方法存取data-自定义属性，方法允许我们在DOM元素上绑定任意类型的数据-避免了循环引用的内存泄漏风险。主要的方法如下："><a href="#如果你使用jQuery类库，那么你可以非常愉悦的使用jquery的data-方法存取data-自定义属性，方法允许我们在DOM元素上绑定任意类型的数据-避免了循环引用的内存泄漏风险。主要的方法如下：" class="headerlink" title="如果你使用jQuery类库，那么你可以非常愉悦的使用jquery的data()方法存取data-*自定义属性，方法允许我们在DOM元素上绑定任意类型的数据,避免了循环引用的内存泄漏风险。主要的方法如下："></a>如果你使用jQuery类库，那么你可以非常愉悦的使用jquery的data()方法存取data-*自定义属性，方法允许我们在DOM元素上绑定任意类型的数据,避免了循环引用的内存泄漏风险。主要的方法如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.data( key, value )</span><br><span class="line">.data( obj )</span><br><span class="line">.data( key )</span><br><span class="line">.data()</span><br></pre></td></tr></table></figure><p><code>从jQuery 1.4.3起， HTML 5 data- 属性 将自动被引用到jQuery的数据对象中。</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如HTML：</span><br><span class="line">&lt;div data-role=&quot;page&quot; data-last-value=&quot;43&quot; data-hidden=&quot;true&quot; data-options=&apos;&#123;&quot;name&quot;:&quot;John&quot;&#125;&apos;&gt;&lt;/div&gt;</span><br><span class="line">下面的 jQuery代码都是返回 true 的：</span><br><span class="line">$(&quot;div&quot;).data(&quot;role&quot;) === &quot;page&quot;;</span><br><span class="line">$(&quot;div&quot;).data(&quot;lastValue&quot;) === 43;</span><br><span class="line">$(&quot;div&quot;).data(&quot;hidden&quot;) === true;</span><br><span class="line">$(&quot;div&quot;).data(&quot;options&quot;).name === &quot;John&quot;;</span><br></pre></td></tr></table></figure></p><p>和html5的api不同的是，jQuery会尝试将字符串转换为一个JavaScript值（包括布尔值（booleans），数字（numbers），对象（objects），<br>数组（arrays）和空（null））。如果这样做不会改变数值的表示，那么该值将转换为一个数字（number）。<br>例如，“1E02”和“100.000”是等同于数字（数字值100），但将转换它们会改变他们的表示，所以他们被保留为字符串。<br>字符串值“100”被转换为数字100。<br>如果数据(data)属性是一个对象（以“{”开始）或数组（以’[‘开始），可以用jQuery.parseJSON 将其解析成字符串；<br>它必须遵循有效的JSON的语法，包括带双引号的属性名称。如果该值不能解析为一个JavaScript值，它将被保留为字符串。<br>如果不想将取出的属性值直接当作字符串的话，请使用attr()方法。<br>data-属性是在第一次使用这个数据属性后不再存取或改变（所有的数据值都在jQuery内部存储）。<br>调用 .data() 时如果不带参数，将会以 JavaScript 对象的形式获取所有数据。这个对象可以安全的存放在变量中，<br>因为一旦这个新对象被提取出来，之后对元素进行的 .data(obj)操作，将不会再影响这个对象。<br>另外，直接操作这个对象会比每次调用 .data() 来设置或获取值要快一些。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTML 5增加了一项新功能是自定义数据属性，也就是 data-*自定义属性。在HTML5中我们可以使用以data-为前缀来设置我们需要的自定义属性，&lt;br&gt;来进行一些数据的存放。当然高级浏览器下可通过脚本进行定义和数据存取。在项目实践中非常有用。&lt;br&gt;&lt;figure c
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="html data-xxx属性" scheme="http://yoursite.com/tags/html-data-xxx%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
</feed>
